{\rtf1\ansi\ansicpg1252\cocoartf1038\cocoasubrtf360
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;\red20\green20\blue19;}
\paperw11900\paperh16840\margl1440\margr1440\vieww20580\viewh12660\viewkind0
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\f0\fs25\fsmilli12963 \cf2 I ] ACP\
\
1) \
\
X = matrix(c(8.5, 1.5, 3.5, 5.0, 2.0, 6.5, 9.5, 1.5, 8.5, 2.5, 3.0, 6.5, 9.0, 2.5, 2.0, 5.5), 8, 2, TRUE)\
Xcentr = scale(X, TRUE, FALSE)\
\
S = 1/8 * t(Xcentr) %*% Xcentr\
\
eig = eigen(S)\
\
\
--> eig : \
\
$values\
[1] 13.9325701  0.2197736\
\
$vectors\
           [,1]       [,2]\
[1,] -0.8472171 -0.5312469\
[2,]  0.5312469 -0.8472171\
\
\
\
--> Inertie expliqu\'e9e par les axes factoriels : \
\
E1  = eig$values[1] / (eig$values[1] + eig$values[2]) * 100\
E2  = eig$values[2] / (eig$values[1] + eig$values[2]) * 100\
\
E1 : 98.44709\
E2 : 1.552913\
\
\
\
2) Composantes principales : \
\
C = X %*% eig$vectors\
\
C :\
\
[1,] -6.4044746 -5.786424\
[2,] -0.3090252 -6.095449\
[3,]  1.7586707 -6.569405\
[4,] -7.2516917 -6.317671\
[5,] -5.8732278 -6.633641\
[6,]  0.9114536 -7.100652\
[7,] -6.2968363 -6.899265\
[8,]  1.2274238 -5.722188\
\
\
plot(C[,1], C[,2], type='n', asp=1)\
text(C[,1],C[,2], letters[1:8])\
\
--> L'ACP transforme un jeu de donn\'e9e de R2 suivant un seul Axe, le premier !\
\
\
3) Reconstitution : \
\
v1 = C[,1] %*% t(U[,1]) \
\
v1 :\
\
[1,]  3.070960 -1.925643\
[2,] -2.093209  1.312545\
[3,] -3.844996  2.411002\
[4,]  3.788736 -2.375725\
[5,]  2.620878 -1.643420\
[6,] -3.127220  1.960921\
[7,]  2.979766 -1.868461\
[8,] -3.394915  2.128779\
\
 \
v2 = v1 + C[,2] %*% t(U[,2])\
\
V2 : \
\
[1,]  2.75 -2.4375\
[2,] -2.25  1.0625\
[3,] -3.75  2.5625\
[4,]  3.75 -2.4375\
[5,]  2.75 -1.4375\
[6,] -2.75  2.5625\
[7,]  3.25 -1.4375\
[8,] -3.75  1.5625\
\
\
On retrouve bien Xcentr = CU'.\
\
\
\
\
\
2] MDS :\
\
1) Calcul de D2 : \
\
a) D2 = dist(Xc, diag=TRUE, upper=TRUE)\
\
b) \
D2proc <- function(X)\
\{\
	n <- dim(X)[1];\
	D2 <- matrix(0,n,n)\
	for(i in 1:n)\
		for(j in 1:n)\
			D2[i,j] <- (X[i,1] - X[j,1])^2 + (X[i,2] - X[j,2])^2;\
\
	return(D2);\
\}\
\
D2 = D2proc(X)\
D2 : \
      [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]\
[1,]  0.00 37.25 67.25  1.00  1.00 55.25  1.25 58.25\
[2,] 37.25  0.00  4.50 48.25 31.25  2.50 36.50  2.50\
[3,] 67.25  4.50  0.00 81.25 58.25  1.00 65.00  1.00\
[4,]  1.00 48.25 81.25  0.00  2.00 67.25  1.25 72.25\
[5,]  1.00 31.25 58.25  2.00  0.00 46.25  0.25 51.25\
[6,] 55.25  2.50  1.00 67.25 46.25  0.00 52.00  2.00\
[7,]  1.25 36.50 65.00  1.25  0.25 52.00  0.00 58.00\
[8,] 58.25  2.50  1.00 72.25 51.25  2.00 58.00  0.00\
\
\
\
\
2) Calcul de W\
\
Qn = diag(8) - 1/8 * matrix(1,8,8) \
Xc = Qn %*% X\
\
a) W = Xc %*% t(Xc)\
\
b) W = -1/2 * Qn %*% D2 %*% Qn\
\
\
3) On a :\
\
eigen(W)\
$values\
[1]  1.114606e+02  1.758189e+00  1.253786e-15  3.542804e-16  3.517163e-16  2.647375e-16 -4.348568e-15 -6.257752e-15\
\
--> Toutes les valeurs propres de W sont positives, W est donc SDP.\
\
\
4)\
Wn = 1 / 8 * W\
\
eig = eigen(Wn)\
\
$values\
1.393257e+01  2.197736e-01  1.567232e-16  4.428506e-17  4.396454e-17  3.309219e-17 -5.435710e-16 -7.822190e-16\
\
$vectors\
           [,1]       [,2]       [,3]         [,4]        [,5]        [,6]        [,7]        [,8]\
[1,]  0.3433356  0.4556392  0.0000000  0.000000000  0.00000000  0.00000000  0.82128779  0.00000000\
[2,] -0.2340223  0.2225827 -0.1165524 -0.055379692 -0.15024719 -0.03121890 -0.02565387 -0.92457133\
[3,] -0.4298735 -0.1348584 -0.1788110 -0.288255628  0.38998409 -0.67851173  0.25452422  0.06862212\
[4,]  0.4235835  0.0549906 -0.4344586 -0.485081671  0.52498045  0.25520811 -0.20758517 -0.09832231\
[5,]  0.2930161 -0.1833035 -0.7320339  0.328780336 -0.37007622 -0.31388930 -0.02079978  0.02560736\
[6,] -0.3496255 -0.5355070 -0.2674863  0.007837928  0.01621075  0.56652367  0.44325125 -0.04123563\
[7,]  0.3331401 -0.3836278  0.2561062  0.533734073  0.51299313 -0.13913942  0.07356374 -0.32163895\
[8,] -0.3795540  0.5040842 -0.3044257  0.534329067  0.38646161  0.18622751 -0.12098820  0.15806282\
\
\
L = abs(eig$values)\
V = sqrt(8) * eig$vectors\
\
\
5) Calcul des composantes principales : \
C = V %*% sqrt(L)\
\
\
6) plot :\
\
\
\
7) Fonction r\'e9alisant l'aftd d'une matrice de distance pass\'e9 en param\'e8tre :\
\
aftd <- function(D)\
\{\
	D = data.matrix(D);\
	D2 = D * D;\
	n = dim(D2)[1];\
	Qn = diag(n) - 1/n * matrix(1,n,n) ;\
\
	W = -1/2 * Qn %*% D2 %*% Qn;\
	Wn = 1 / n * W;\
\
	eig = eigen(Wn);\
	val = abs(eig$values);\
\
	l = diag(val);\
	v = sqrt(n) * eig$vectors;\
	c = v %*% sqrt(l);\
	\
	plot(c);\
	ret <- list(L=l, V=v, C=c);\
\}\
\

\fs19\fsmilli9963 \
\
}