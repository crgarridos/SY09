help(hclust)
library(MASS)
crabs
data(iris)
iris
donnees <- NULL
donnees
donnees$num <- iris[,c(1:4)]
donnees
donnees$cls <- iris[,5]
donnees
donnes$cls
donnees$cls
donnees$num
hclust(donnees)
hclust(iris)
dist(donnees)
dist(iris)
hclust(dist(iris))
plot(hclust(dist(iris)))
plot(hclust(dist(donnees$num)))
help(dist)
getwd()
setwd("Z:\\TP\\TP2")
getwd()
read.table("mutation.txt", header=F, row.names=1)
mutation<-read.table("mutation.txt", header=F, row.names=1)
mutation
mutation
hclust(mutation)
hclust(dist(mutation))
plot(hclust(dist(mutation)))
plot(hclust(dist(mutation)), col="tomato3")
plot(hclust(dist(mutation)), col=c("tomato3","orange"))
plot(hclust(dist(mutation)), col=c("tomato3","orange")[mutation$V1])
plot(hclust(dist(mutation)), pch=21)
help(pch)
plot(hclust(dist(mutation)), pch=21, ljoin=0)
plot(hclust(dist(mutation)), pch=21, ljoin=1)
plot(hclust(dist(mutation)), pch=21, lty=4)
plot(hclust(dist(mutation)), pch=21, lty=5)
plot(hclust(dist(mutation)), pch=21, lty=6)
plot(hclust(dist(mutation)), pch=21, lty=1)
plot(hclust(dist(mutation)), pch=21, lty=2)
plot(hclust(dist(mutation)), pch=21, lty=0)
plot(hclust(dist(mutation)), col="tomato3")
plot(hclust(dist(mutation)method=warp))
plot(hclust(dist(mutation)method="warp"))
plot(hclust(dist(mutation)),method="ward")
help(hclust)
plot(hclust(dist(mutation)),"ward"))
plot(hclust(dist(mutation),"ward"))
plot(hclust(dist(mutation),method="ward"))
plot(hclust(dist(mutation),method="average"))
plot(hclust(dist(mutation),method="centroid"))
plot(hclust(dist(mutation),method="average"))
plot(hclust(dist(mutation),method="mcquitty"))
plot(hclust(dist(mutation),method="single"))
plot(hclust(dist(mutation),method="complete"))
plot(hclust(dist(mutation),method="ward"))
plot(hclust(dist(mutation),method="complete"))
plot(hclust(dist(mutation),method="average"))
plot(hclust(dist(mutation),method="ward"))
plot(hclust(dist(mutation),method="complete"))
par(nfrow=c(2,2))
par(mfrow=c(2,2))
d = as.dist(mutation)
d
h = hclust(d, method="ward")
d = as.dist(mutation)
par(mfrow=c(2,2)) 
h = hclust(d, method="ward")
plot(h,hang=-1,main = " Cluster dendogramme, critère de Ward")
h1 = hclust(d, method="single")
plot(h1,hang=-1,main = " Cluster dendogramme, critère du minimum")
h2 = hclust(d, method="complete")
plot(h2,hang=-1,main = " Cluster dendogramme, critère du maximum")
h3 = hclust(d, method="average")
plot(h3,hang=-1,main = " Cluster dendogramme, critère de la moyenne")
d = as.dist(mutation)
par(mfrow=c(2,2)) 
h = hclust(d, method="ward")
plot(h,hang=-1,main = " Cluster dendogramme, critère de Ward")
h1 = hclust(d, method="single")
plot(h1,hang=-1,main = " Cluster dendogramme, critère du minimum")
h2 = hclust(d, method="complete")
plot(h2,hang=-1,main = " Cluster dendogramme, critère du maximum")
h3 = hclust(d, method="average")
plot(h3,hang=-1,main = " Cluster dendogramme, critère de la moyenne")
par(mfrow=c(1,1)) 
d = dist(donnees$num)
par(mfrow=c(2,2)) 
h = hclust(d, method="ward")
plot(h,hang=-1,main = " Cluster dendogramme, critère de Ward")
h1 = hclust(d, method="single")
plot(h1,hang=-1)
h2 = hclust(d, method="complete")
plot(h2,hang=-1)
h3 = hclust(d, method="average")
plot(h3,hang=-1)
par(mfrow=c(1,1))
plot(princomp(donnees$num)$scores)
plot(princomp(donnees$num)$scores, col=c("tomato3","blue","green")[donnees$cls])
princomp(donnees$numà
)
princomp(donnees$num)
princomp(donnees$num)$scores
plot(princomp(donnees$num)$scores, col=c("tomato3","blue","green")[donnees$cls], pch=19)
plot(princomp(donnees$num)$scores, col=c("tomato3","blue","green")[donnees$cls], pch=24)
plot(princomp(donnees$num)$scores, col=c("tomato3","blue","green")[donnees$cls], pch=23)
plot(princomp(donnees$num)$scores, col=c("tomato3","blue","green")[donnees$cls], pch=22)
plot(princomp(donnees$num)$scores, col=c("tomato3","blue","green")[donnees$cls], pch=25)
h3 = hclust(d, method="average")
plot(princomp(donnees$num)$scores, col=c("tomato3","blue","green")[donnees$cls], pch=23)
diana
diana()
cluster.diana
help("diana")
help.search("diana")
diana
diana.cluster
diana(h)
help(diana)
help(cluster)
library(cluster)
diana
diana(dist(iris$num))
diana(iris$num)
help(diana)
diana(donnees$num)
plot(diana(donnees$num))
y
plot(diana(dist(donnees$num)))
plot(diana(dist(donnees$num)))
dia = diana(d)
plot(dia,hang=-1,main = "Dendogramme de Diana")
cut <- cutree(h,3)
t <- table(donnees$cls,cut)
clusplot(donnees$num,cut, main = "Nombre fixé à 3")
plot(h)
clusplot(donnees$num,cut, main = "Nombre fixé à 3")
cut <- cutree(h,2)
t <- table(donnees$cls,cut)
clusplot(donnees$num,cut, main = "Nombre fixé à 2")
cut <- cutree(h,4)
t <- table(donnees$cls,cut)
clusplot(donnees$num,cut, main = "Nombre fixé à 4")
cut <- cutree(h,5)
t <- table(donnees$cls,cut)
clusplot(donnees$num,cut, main = "Nombre fixé à 5")
help(kmeans)
kmeans(iris$num)
kmeans(donnees$num)
kmeans(dist(donnees$num))
plot(diana(donnees$num, diss=T))
plot(diana(donnees$num, disT=T))
plot(diana(donnees$num, dist=T))
kmeans(donnees$num, diss=T)
kmeans(dist(donnees$num), diss=T)
kmeans(dist(donnees$num))
donnees$num
kmeans(dist(donnees$num),c(2,3,4))
kmeans(dist(donnees$num),2)
plot(kmeans(dist(donnees$num),2))
biplot(kmeans(dist(donnees$num),2))
hist(kmeans(dist(donnees$num),2))
pairs(kmeans(dist(donnees$num),2))
cluster
help(cluster)
help.search("cluster")
clusplot(kmeans(dist(donnees$num),2))
K<- kmeans(donnees$num,2)
plot(donnees$num, col = K$cluster)
plot(K$cluster)
K<- kmeans(donnees$num,2)
plot(donnees$num, col = K$cluster)
plot(K$cluster)
K<- kmeans(donnees$num,3)
plot(donnees$num, col = K$cluster)
plot(K$cluster)
K<- kmeans(donnees$num,4)
plot(donnees$num, col = K$cluster)
plot(K$cluster)
K<- kmeans(donnees$num,4)
plot(donnees$num, col = K$cluster)
plot(donnees$num, col = K$cluster, pch=c(19,23,24)[iris$cls])
plot(donnees$num, col = K$cluster, pch=c(19,23,24)[donnees$cls])
K<-kmeans(donnees$num,3)
plot(donnees$num, col = K$cluster, pch=c(19,23,24)[donnees$cls])
K<-kmeans(donnees$num,2)
plot(donnees$num, col = K$cluster, pch=c(19,23,24)[donnees$cls])
donnees$cls
rep('x',50)
ls()
K
plot(donnees$num, col = K$cluster)
plot(K$cluster)
K<- kmeans(donnees$num,3)
plot(donnees$num, col = K$cluster)
plot(K$cluster)
K<- kmeans(donnees$num,3)
K
plot(donnes$num,col=K$cluster)
plot(donnees$num,col=K$cluster)
K
plot(donnees$num,col=K$cluster)
plot(K$cluster)
test <- sum(K$withinss);
test
K<- kmeans(donnees$num,3)
test <- sum(K$withinss);
test
K<- kmeans(donnees$num,3)
test <- sum(K$withinss);
test
inertie <- function()
inertie <- matrix(nrow=100, ncol=9);
inertie <- function(){
inertie <- matrix(nrow=100, ncol=9);
for(k in 2:10){
for(j in 1:100){
K <- kmeans(donnnes$num,k);
inertie[j,k-1] <- sum(K$withinK <- kmeans(donnnes$num,k);)
K
K <- kmeans(donnnes$num,k);
K<- kmeans(donnees$num,3)
test <- sum(K$withinss);
test
K<- kmeans(donnees$num,3)
test <- sum(K$withinss);
K<- kmeans(donnees$num,3)
test
K<- kmeans(donnees$num,3)
K<- kmeans(donnees$num,3)
test <- sum(K$withinss);
test
test <- sum(K$withinss);
test
test <- sum(K$withinss);
test
K<- kmeans(donnees$num,3)
test <- sum(K$withinss);
test
K<- kmeans(donnees$num,3)
test <- sum(K$withinss);
test
K<- kmeans(donnees$num,3)
test <- sum(K$withinss);
test
K<- kmeans(donnees$num,3)
test <- sum(K$withinss);
test
K<- kmeans(donnees$num,3)
test <- sum(K$withinss);
test
K<- kmeans(donnees$num,3)
test <- sum(K$withinss);
test
K<- kmeans(donnees$num,3)
test <- sum(K$withinss);
test
K<- kmeans(donnees$num,3)
test <- sum(K$withinss);*
test <- sum(K$withinss);*
test <- sum(K$withinss);
test
K<- kmeans(donnees$num,3)
test <- sum(K$withinss);
test
K
test <- sum(K$withinss);
test
K<- kmeans(donnees$num,3)
test <- sum(K$withinss);
test
test <- function(){
for(i in 1:10){
K <- kmeans(donnees$num,3);
res <- sum(k$within);
res;
}}
test
test()
test
test <- function(){
K <- kmeans(donnees$num,3);
res <- sum(k$within);
res;}}
test <- function(){
+ K <- kmeans(donnees$num,3);
}
K <- kmeans(donnees$num,3);
K
test <- sum(k$within);
test <- sum(K$within);
test
test <- function(){
for(i in 1:10){
k <- kmeans(donnees$num,3);
res <- sum(k$within);
res;}}
test()
test <- function(){
res = matrix(nrow=10, ncol = 1);
for(i in 1:10){
k <- kmeans(donnees$num,3);
res[i,1] <- sum(k$within);
}
return res;
test <- function()
{
res <- matrix( nrow=10, ncol=1);
for(i in 1:10)
{
k <- kmeans(donnees$num, 3);
res[i,1] <- sum(k$within);
}
return (res);
}
test()
inertie <- function()
{
inertie <- matrix(nrow=100, ncol=9);
for(k in 2:10)
{
for(i in 1:100)
{
k <- kmeans(donnees$num, k);
inertie[i, k-1] <- sum(k$within);
}
}
return(inertie);
}
inertie
inertie()
inertie <- function()
{
inertie <- matrix(nrow=100, ncol=9);
for(k in 2:10)
{
for(i in 1:100)
{
K <- kmeans(donnees$num, k);
inertie[i, k-1] <- sum(K$within);
}
}
return(inertie);
}
inertie()
inertie_min <- function()
{
min <- matrix(nrow=9, ncol=1);
for(k in 2:10)
{
K <- kmeans(donnees$num, k);
min[k-1,1] <- sum(K$within);
for(i in 2:100)
{
K <- kmeans(donnees$num, k);
tmp <- sum(K$within);
if( tmp < min[k-1,1] )
{
min[k-1,1] <- tmp;
}
}
}
return(min);
}
inertie_min()
plot(c(2:10), min)
plot(c(2:10), min[,1])
inertie_min <- function()
{
min <- matrix(nrow=1, ncol=9);
for(k in 2:10)
{
K <- kmeans(donnees$num, k);
min[1,k-1] <- sum(K$within);
for(i in 2:100)
{
K <- kmeans(donnees$num, k);
tmp <- sum(K$within);
if( tmp < min[1,k-1] )
{
min[1,k-1] <- tmp;
}
}
}
return(min);
}
inertie_min()
plot(c(2:10), inertie_min())
inertie_min <- function()
{
min <- matrix(nrow=9, ncol=1);
for(k in 2:10)
{
K <- kmeans(donnees$num, k);
min[k-1,1] <- sum(K$within);
for(i in 2:100)
{
K <- kmeans(donnees$num, k);
tmp <- sum(K$within);
if( tmp < min[k-1,1] )
{
min[k-1,1] <- tmp;
}
}
}
return(min);
}
min <- inertie_min()
plot(c(2:10),inertie_min)
plot(c(2:10),min)
min
plot(c(2:10),min,type="l")
d <- dist(donnees$num);
h <- hclust(d, method="single");
cut <- cutree(h,3);
plot(cut)
plot(kmeans(donnees$num, 3)$clust)
plot(cut)
plot(kmeans(donnees$num, 3)$clust)
plot(cut)
plot(kmeans(donnees$num, 3)$clust)
plot(c(2:10),min,type="l")
library(MASS)
data(crabs)
crabsquant <- crabs[,4:8]
crabsquant <- crabsquant/matrix(rep(crabsquant[,4],4),nrow=dim(crabsquant)[1],byrow=F)
d = dist(crabsquant)
h = hclust(d, method="single")
cut <- cutree(h,4)
plot(cut)
cut <- cutree(h,2)
cut <- cutree(h,4)
cut <- cutree(h,2)
plot(cut)
cut <- cutree(h,4)
plot(cut)
