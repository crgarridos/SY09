}
aftd(dist(Xc))
for(i in 0:12)
aftd(dist(Xc),i)
aftd <- function (distances, decimals=12) {
D2 = as.matrix(distances)^2
n = dim(D2)[1]
In = diag(n)
Un = matrix(rep(1, n^2), n)
Qn = In - (1/n)*Un
W = -(1/2)*Qn%*%D2%*%Qn
V = eigen((1/n)*W)$vectors
V = sqrt(n)*V
L_ = eigen((1/n)*W)$values;
L = diag(round(L_,decimals))
result = NULL
result$quality = sum(diag(abs(L))) / sum(abs(L_)) *100
print(decimals)
print(sum(diag(L)))
print(sum(L_))
print(result$qualit)
result$C <- V%*%sqrt(L)
#return(result)
}
aftd(dist(Xc))
for(i in 0:12)
aftd(dist(Xc),i)
aftd <- function (distances, decimals=12) {
D2 = as.matrix(distances)^2
n = dim(D2)[1]
In = diag(n)
Un = matrix(rep(1, n^2), n)
Qn = In - (1/n)*Un
W = -(1/2)*Qn%*%D2%*%Qn
V = eigen((1/n)*W)$vectors
V = sqrt(n)*V
L_ = eigen((1/n)*W)$values;
L = diag(round(L_,decimals))
result = NULL
result$quality = sum(diag(L)) / sum(abs(L_)) *100
print(decimals)
print(sum(diag(L)))
print(sum(L_))
print(result$qualit)
result$C <- V%*%sqrt(L)
#return(result)
}
aftd(dist(Xc))
for(i in 0:12)
aftd(dist(Xc),i)
aftd <- function (distances, decimals=12) {
D2 = as.matrix(distances)^2
n = dim(D2)[1]
In = diag(n)
Un = matrix(rep(1, n^2), n)
Qn = In - (1/n)*Un
W = -(1/2)*Qn%*%D2%*%Qn
V = eigen((1/n)*W)$vectors
V = sqrt(n)*V
L_ = eigen((1/n)*W)$values;
L = diag(round(L_,decimals))
result = NULL
result$quality = 100 - sum(diag(L)) / sum(abs(L_))
print(decimals)
print(sum(diag(L)))
print(sum(L_))
print(result$qualit)
result$C <- V%*%sqrt(L)
#return(result)
}
aftd(dist(Xc))
for(i in 0:12)
aftd(dist(Xc),i)
aftd <- function (distances, decimals=12) {
D2 = as.matrix(distances)^2
n = dim(D2)[1]
In = diag(n)
Un = matrix(rep(1, n^2), n)
Qn = In - (1/n)*Un
W = -(1/2)*Qn%*%D2%*%Qn
V = eigen((1/n)*W)$vectors
V = sqrt(n)*V
L_ = eigen((1/n)*W)$values;
L = diag(round(L_,decimals))
result = NULL
result$quality = 1 - abs(sum(diag(L)) - sum(abs(L_)))
print(decimals)
print(sum(diag(L)))
print(sum(L_))
print(result$qualit)
result$C <- V%*%sqrt(L)
#return(result)
}
aftd(dist(Xc))
for(i in 0:12)
aftd(dist(Xc),i)
aftd <- function (distances, decimals=12) {
D2 = as.matrix(distances)^2
n = dim(D2)[1]
In = diag(n)
Un = matrix(rep(1, n^2), n)
Qn = In - (1/n)*Un
W = -(1/2)*Qn%*%D2%*%Qn
V = eigen((1/n)*W)$vectors
V = sqrt(n)*V
L_ = eigen((1/n)*W)$values;
L = diag(round(L_,decimals))
result = NULL
result$quality = 1 - abs(sum(diag(L)) - sum(abs(L_)))/sum(abs(L_))
print(decimals)
print(sum(diag(L)))
print(sum(L_))
print(result$qualit)
result$C <- V%*%sqrt(L)
#return(result)
}
aftd(dist(Xc))
for(i in 0:12)
aftd(dist(Xc),i)
aftd <- function (distances, decimals=12) {
D2 = as.matrix(distances)^2
n = dim(D2)[1]
In = diag(n)
Un = matrix(rep(1, n^2), n)
Qn = In - (1/n)*Un
W = -(1/2)*Qn%*%D2%*%Qn
V = eigen((1/n)*W)$vectors
V = sqrt(n)*V
L_ = eigen((1/n)*W)$values;
L = diag(round(L_,decimals))
result = NULL
result$quality = (1 - (abs(sum(diag(L)) - sum(abs(L_)))/sum(abs(L_))))*100
print(decimals)
print(sum(diag(L)))
print(sum(L_))
print(result$qualit)
result$C <- V%*%sqrt(L)
#return(result)
}
aftd(dist(Xc))
for(i in 0:12)
aftd(dist(Xc),i)
Shepard(mutations,14)
Shepard(mutations)
?Shepard
Shepard(mutations,  cmdsclae(d,4))
Shepard(mutations,  cmdscale(d,4))
Shepard(mutations,  cmdscale(mutations,4))
levels(Shepard(mutations,  cmdscale(mutations,4))
)
ls(Shepard(mutations,  cmdscale(mutations,4)))
Shepard(mutations,  cmdscale(mutations,4))$x
Shepard(mutations,  cmdscale(mutations,4))$y
Shepard(mutations,  cmdscale(mutations,4))$yf
Shepard(mutations,  cmdscale(mutations,4))$stress
Shepard(mutations,  cmdscale(mutations,4))$stres
Shepard(mutations,  cmdscale(mutations,4))$str
aftd <- function (distances, k=12) {
D2 = as.matrix(distances)^2
n = dim(D2)[1]
In = diag(n)
Un = matrix(rep(1, n^2), n)
Qn = In - (1/n)*Un
W = -(1/2)*Qn%*%D2%*%Qn
V = eigen((1/n)*W)$vectors
V = sqrt(n)*V
L_ = eigen((1/n)*W)$values;
L = diag(L_[,1:k]))
result = NULL
result$quality = (1 - (abs(sum(diag(L)) - sum(abs(L_)))/sum(abs(L_))))*100
print(decimals)
print(sum(diag(L)))
print(sum(L_))
print(result$qualit)
result$C <- V%*%sqrt(L)
#return(result)
}
aftd(dist(Xc))
for(i in 0:12)
aftd(dist(Xc),i)
aftd <- function (distances, k=12) {
D2 = as.matrix(distances)^2
n = dim(D2)[1]
In = diag(n)
Un = matrix(rep(1, n^2), n)
Qn = In - (1/n)*Un
W = -(1/2)*Qn%*%D2%*%Qn
V = eigen((1/n)*W)$vectors
V = sqrt(n)*V
L_ = eigen((1/n)*W)$values;
L = diag(L_[,1:k])
result = NULL
result$quality = (1 - (abs(sum(diag(L)) - sum(abs(L_)))/sum(abs(L_))))*100
print(decimals)
print(sum(diag(L)))
print(sum(L_))
print(result$qualit)
result$C <- V%*%sqrt(L)
#return(result)
}
aftd(dist(Xc))
for(i in 0:12)
aftd(dist(Xc),i)
aftd <- function (distances, k=12) {
D2 = as.matrix(distances)^2
n = dim(D2)[1]
In = diag(n)
Un = matrix(rep(1, n^2), n)
Qn = In - (1/n)*Un
W = -(1/2)*Qn%*%D2%*%Qn
V = eigen((1/n)*W)$vectors
V = sqrt(n)*V
L_ = eigen((1/n)*W)$values;
L = diag(L_[,1:k])
result = NULL
result$quality = (1 - (abs(sum(diag(L)) - sum(abs(L_)))/sum(abs(L_))))*100
print(decimals)
print(sum(diag(L)))
print(sum(L_))
print(result$qualit)
result$C <- V%*%sqrt(L)
#return(result)
}
aftd(dist(Xc))
for(i in 2:12)
aftd(dist(Xc),i)
Shepard(mutations,  cmdscale(mutations,4))$str
aftd(dist(Xc),4
)
aftd <- function (distances, k=12) {
D2 = as.matrix(distances)^2
n = dim(D2)[1]
In = diag(n)
Un = matrix(rep(1, n^2), n)
Qn = In - (1/n)*Un
W = -(1/2)*Qn%*%D2%*%Qn
V = eigen((1/n)*W)$vectors
V = sqrt(n)*V
L_ = eigen((1/n)*W)$values;
return L_
L = diag(L_[,1:k])
result = NULL
result$quality = (1 - (abs(sum(diag(L)) - sum(abs(L_)))/sum(abs(L_))))*100
print(decimals)
print(sum(diag(L)))
print(sum(L_))
print(result$qualit)
result$C <- V%*%sqrt(L)
#return(result)
}
aftd(dist(Xc))
for(i in 2:12)
aftd(dist(Xc),i)
aftd <- function (distances, k=12) {
D2 = as.matrix(distances)^2
n = dim(D2)[1]
In = diag(n)
Un = matrix(rep(1, n^2), n)
Qn = In - (1/n)*Un
W = -(1/2)*Qn%*%D2%*%Qn
V = eigen((1/n)*W)$vectors
V = sqrt(n)*V
L_ = eigen((1/n)*W)$values;
L = diag(L_[1:k])
result = NULL
result$quality = (1 - (abs(sum(diag(L)) - sum(abs(L_)))/sum(abs(L_))))*100
print(decimals)
print(sum(diag(L)))
print(sum(L_))
print(result$qualit)
result$C <- V%*%sqrt(L)
#return(result)
}
aftd(dist(Xc))
for(i in 2:12)
aftd(dist(Xc),i)
aftd <- function (distances, k=12) {
D2 = as.matrix(distances)^2
n = dim(D2)[1]
In = diag(n)
Un = matrix(rep(1, n^2), n)
Qn = In - (1/n)*Un
W = -(1/2)*Qn%*%D2%*%Qn
V = eigen((1/n)*W)$vectors
V = sqrt(n)*V
L_ = eigen((1/n)*W)$values;
L = diag(L_[1:k])
result = NULL
result$quality = (1 - (abs(sum(diag(L)) - sum(abs(L_)))/sum(abs(L_))))*100
print(decimals)
print(sum(diag(L)))
print(sum(L_))
print(result$qualit)
result$C <- V%*%sqrt(L)
#return(result)
}
aftd(dist(Xc))
for(i in 2:6)
aftd(dist(Xc),i)
aftd <- function (distances, k=12) {
D2 = as.matrix(distances)^2
n = dim(D2)[1]
In = diag(n)
Un = matrix(rep(1, n^2), n)
Qn = In - (1/n)*Un
W = -(1/2)*Qn%*%D2%*%Qn
V = eigen((1/n)*W)$vectors
V = sqrt(n)*V
L_ = eigen((1/n)*W)$values;
L = diag(L_[1:k])
result = NULL
result$quality = (1 - (abs(sum(diag(L)) - sum(abs(L_)))/sum(abs(L_))))*100
print(k)
print(sum(diag(L)))
print(sum(L_))
print(result$qualit)
result$C <- V%*%sqrt(L)
#return(result)
}
aftd(dist(Xc))
for(i in 2:6)
aftd(dist(Xc),i)
aftd <- function (distances, k=2) {
D2 = as.matrix(distances)^2
n = dim(D2)[1]
In = diag(n)
Un = matrix(rep(1, n^2), n)
Qn = In - (1/n)*Un
W = -(1/2)*Qn%*%D2%*%Qn
V = eigen((1/n)*W)$vectors
V = sqrt(n)*V
L_ = eigen((1/n)*W)$values;
L = diag(L_[1:k])
result = NULL
result$quality = (1 - (abs(sum(diag(L)) - sum(abs(L_)))/sum(abs(L_))))*100
print(k)
print(sum(diag(L)))
print(sum(L_))
print(result$qualit)
result$C <- V%*%sqrt(L)
#return(result)
}
for(i in 2:6)
aftd(dist(Xc),i)
aftd <- function (distances, k=2) {
D2 = as.matrix(distances)^2
n = dim(D2)[1]
In = diag(n)
Un = matrix(rep(1, n^2), n)
Qn = In - (1/n)*Un
W = -(1/2)*Qn%*%D2%*%Qn
V = eigen((1/n)*W)$vectors
V = sqrt(n)*V[,1:k]
L_ = eigen((1/n)*W)$values;
L = diag(L_[1:k])
result = NULL
result$quality = (1 - (abs(sum(diag(L)) - sum(abs(L_)))/sum(abs(L_))))*100
print(k)
print(sum(diag(L)))
print(sum(L_))
print(result$qualit)
result$C <- V%*%sqrt(L)
#return(result)
}
for(i in 2:6)
aftd(dist(Xc),i)
aftd <- function (distances, k=2) {
D2 = as.matrix(distances)^2
n = dim(D2)[1]
In = diag(n)
Un = matrix(rep(1, n^2), n)
Qn = In - (1/n)*Un
W = -(1/2)*Qn%*%D2%*%Qn
V = eigen((1/n)*W)$vectors
V = sqrt(n)*V[,1:k]
L_ = eigen((1/n)*W)$values;
L = diag(L_[1:k])
result = NULL
result$quality = (1 - (abs(sum(diag(L)) - sum(abs(L_)))/sum(abs(L_))))*100
print(k)
print(sum(diag(L)))
print(sum(L_))
print(result$qualit)
result$C <- V%*%sqrt(L)
#return(result)
}
for(i in 2:5)
aftd(dist(Xc),i)
aftd <- function (distances, k=2) {
D2 = as.matrix(distances)^2
n = dim(D2)[1]
In = diag(n)
Un = matrix(rep(1, n^2), n)
Qn = In - (1/n)*Un
W = -(1/2)*Qn%*%D2%*%Qn
V = eigen((1/n)*W)$vectors
V = sqrt(n)*V[,1:k]
L_ = eigen((1/n)*W)$values;
L = diag(L_[1:k])
result = NULL
result$quality = (sum(abs(L))/sum(abs(L_)))*100
print(k)
print(sum(diag(L)))
print(sum(L_))
print(result$qualit)
result$C <- V%*%sqrt(L)
#return(result)
}
for(i in 2:5)
aftd(dist(Xc),i)
aftd <- function (distances, k=2) {
D2 = as.matrix(distances)^2
n = dim(D2)[1]
In = diag(n)
Un = matrix(rep(1, n^2), n)
Qn = In - (1/n)*Un
W = -(1/2)*Qn%*%D2%*%Qn
V = eigen((1/n)*W)$vectors
V = sqrt(n)*V[,1:k]
L_ = eigen((1/n)*W)$values;
L = diag(L_[1:k])
result = NULL
result$quality = (sum(abs(L))/sum(abs(diag(L_)))*100
print(k)
print(sum(diag(L)))
print(sum(L_))
print(result$qualit)
result$C <- V%*%sqrt(L)
#return(result)
}
for(i in 2:5)
aftd(dist(Xc),i)
aftd(mutations)
aftd <- function (distances, k=2) {
D2 = as.matrix(distances)^2
n = dim(D2)[1]
In = diag(n)
Un = matrix(rep(1, n^2), n)
Qn = In - (1/n)*Un
W = -(1/2)*Qn%*%D2%*%Qn
V = eigen((1/n)*W)$vectors
V = sqrt(n)*V[,1:k]
L_ = eigen((1/n)*W)$values;
L = diag(L_[1:k])
result = NULL
result$quality = (sum(abs(L))/sum(abs(diag(L_)))*100
result$C <- V%*%sqrt(L)
return(result)
}
for(i in 2:5)
aftd(dist(Xc),i)
aftd(mutations)
aftd <- function (distances, k=2) {
D2 = as.matrix(distances)^2
n = dim(D2)[1]
In = diag(n)
Un = matrix(rep(1, n^2), n)
Qn = In - (1/n)*Un
W = -(1/2)*Qn%*%D2%*%Qn
V = eigen((1/n)*W)$vectors
V = sqrt(n)*V[,1:k]
L_ = eigen((1/n)*W)$values;
L = diag(L_[1:k])
result = NULL
result$quality = (sum(abs(L))/sum(abs(diag(L_)))*100
result$C <- V%*%sqrt(L)
return(result)
}
aftd <- function (distances, k=2) {
D2 = as.matrix(distances)^2
n = dim(D2)[1]
In = diag(n)
Un = matrix(rep(1, n^2), n)
Qn = In - (1/n)*Un
W = -(1/2)*Qn%*%D2%*%Qn
V = eigen((1/n)*W)$vectors
V = sqrt(n)*V[,1:k]
L_ = eigen((1/n)*W)$values;
L = diag(L_[1:k])
result = NULL
result$quality = sum(abs(L))/sum(abs(diag(L_)))*100
result$C <- V%*%sqrt(L)
return(result)
}
for(i in 2:5)
aftd(dist(Xc),i)
aftd <- function (distances, k=2) {
D2 = as.matrix(distances)^2
n = dim(D2)[1]
In = diag(n)
Un = matrix(rep(1, n^2), n)
Qn = In - (1/n)*Un
W = -(1/2)*Qn%*%D2%*%Qn
V = eigen((1/n)*W)$vectors
V = sqrt(n)*V[,1:k]
L_ = eigen((1/n)*W)$values;
L = diag(L_[1:k])
result = NULL
result$quality = sum(abs(L))/sum(abs(diag(L_)))*100
result$C <- V%*%sqrt(L)
return(result)
}
aftd(mutations)
aftd(mutations,14)
aftd(mutations,5)
aftd(mutations,5)$qualite
aftd(mutations,5)$quality
aftd(mutations,5)$quality
aftd(mutations,4)$quality
aftd(mutations,3)$quality
aftd(mutations,2)$quality
aftd(mutations,14)$quality
